class MaximumSum
{
	/*Function to return max sum such that no two elements
	are adjacent */
	int FindMaxSum(int arr[], int n)
	{
		int incl = arr[0];
		int excl = 0;
		int excl_new;
		int i;

		for (i = 1; i < n; i++)
		{
			/* current max excluding i */
			excl_new = (incl > excl) ? incl : excl;

			/* current max including i */
			incl = excl + arr[i];
			excl = excl_new;
		}

		/* return max of incl and excl */
		return ((incl > excl) ? incl : excl);
	}

	// Driver program to test above functions
	public static void main(String[] args)
	{
		MaximumSum sum = new MaximumSum();
		int arr[] = new int[]{5, 3,5, 6};
		System.out.println(sum.FindMaxSum(arr, arr.length));
	}
}

// This code has been contributed by Mayank Jaiswal


-------------------------------------------------------------------------------------------------------------
This is wrong for case arr= {5, 3, 5, 6}

import java.lang.*;

public class Robbery{
    
    static int findSteal(int[] arr, int x){
        int sum = 0;
        while(x<arr.length){
            sum += arr[x];
            x+=2;
        }
        return sum;
    }
    
    static int maxRob(int[] arr){
        
        return Math.max(findSteal(arr, 0), findSteal(arr,1));
    }

    public static void main(String[] args){
        //int[] arr = {5, 7, 3, 2, 5, 4};
        
        //System.out.println(maxRob(arr));
		
		Scanner sc = new Scanner(System.in);
        
        int tests = sc.nextInt();
        while(tests-->0){
            int n = sc.nextInt();
            int[] arr = new int[n]
            for(int i =0; i<n; i++){
                arr[i] = sc.nextInt();
            }
            System.out.println(maxRob(arr));
        }
    }
}
------------------------------------------------------------------------------------------------------------